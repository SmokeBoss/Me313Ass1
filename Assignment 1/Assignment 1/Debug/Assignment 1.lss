
Assignment 1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000005e6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000004  00800060  000005e6  0000067a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000f  00800064  00800064  0000067e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000067e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000006b0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000060  00000000  00000000  000006ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000007d2  00000000  00000000  0000074c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000005d2  00000000  00000000  00000f1e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000058a  00000000  00000000  000014f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000174  00000000  00000000  00001a7c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000042c  00000000  00000000  00001bf0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000002ca  00000000  00000000  0000201c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  000022e6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	da c1       	rjmp	.+948    	; 0x3b8 <__vector_1>
   4:	c3 c1       	rjmp	.+902    	; 0x38c <__vector_2>
   6:	90 c0       	rjmp	.+288    	; 0x128 <__vector_3>
   8:	29 c0       	rjmp	.+82     	; 0x5c <__bad_interrupt>
   a:	28 c0       	rjmp	.+80     	; 0x5c <__bad_interrupt>
   c:	27 c0       	rjmp	.+78     	; 0x5c <__bad_interrupt>
   e:	26 c0       	rjmp	.+76     	; 0x5c <__bad_interrupt>
  10:	c5 c0       	rjmp	.+394    	; 0x19c <__vector_8>
  12:	24 c0       	rjmp	.+72     	; 0x5c <__bad_interrupt>
  14:	23 c0       	rjmp	.+70     	; 0x5c <__bad_interrupt>
  16:	22 c0       	rjmp	.+68     	; 0x5c <__bad_interrupt>
  18:	21 c0       	rjmp	.+66     	; 0x5c <__bad_interrupt>
  1a:	20 c0       	rjmp	.+64     	; 0x5c <__bad_interrupt>
  1c:	1f c0       	rjmp	.+62     	; 0x5c <__bad_interrupt>
  1e:	1e c0       	rjmp	.+60     	; 0x5c <__bad_interrupt>
  20:	1d c0       	rjmp	.+58     	; 0x5c <__bad_interrupt>
  22:	1c c0       	rjmp	.+56     	; 0x5c <__bad_interrupt>
  24:	1b c0       	rjmp	.+54     	; 0x5c <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_copy_data>:
  32:	10 e0       	ldi	r17, 0x00	; 0
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	e6 ee       	ldi	r30, 0xE6	; 230
  3a:	f5 e0       	ldi	r31, 0x05	; 5
  3c:	02 c0       	rjmp	.+4      	; 0x42 <__SREG__+0x3>
  3e:	05 90       	lpm	r0, Z+
  40:	0d 92       	st	X+, r0
  42:	a4 36       	cpi	r26, 0x64	; 100
  44:	b1 07       	cpc	r27, r17
  46:	d9 f7       	brne	.-10     	; 0x3e <__SP_H__>

00000048 <__do_clear_bss>:
  48:	20 e0       	ldi	r18, 0x00	; 0
  4a:	a4 e6       	ldi	r26, 0x64	; 100
  4c:	b0 e0       	ldi	r27, 0x00	; 0
  4e:	01 c0       	rjmp	.+2      	; 0x52 <.do_clear_bss_start>

00000050 <.do_clear_bss_loop>:
  50:	1d 92       	st	X+, r1

00000052 <.do_clear_bss_start>:
  52:	a3 37       	cpi	r26, 0x73	; 115
  54:	b2 07       	cpc	r27, r18
  56:	e1 f7       	brne	.-8      	; 0x50 <.do_clear_bss_loop>
  58:	0e d2       	rcall	.+1052   	; 0x476 <main>
  5a:	c3 c2       	rjmp	.+1414   	; 0x5e2 <_exit>

0000005c <__bad_interrupt>:
  5c:	d1 cf       	rjmp	.-94     	; 0x0 <__vectors>

0000005e <light_control>:
*/


//controls the periodic switching of the lights based on the period the user has set, which is between 1 - 4 seconds (default 1s)
// its placed up here to avoid warnings
void light_control(){
  5e:	cf 93       	push	r28
  60:	df 93       	push	r29
  62:	1f 92       	push	r1
  64:	cd b7       	in	r28, 0x3d	; 61
  66:	de b7       	in	r29, 0x3e	; 62
	// If we've passed the correct time period, and we're not in configuration mode
	// note that lightState denotes red, yellow and green states for our code. If the value is 0 then its red, 1 is yellow, and 2 is green
	if ((currentTime >= (stateMultiplier*250)) && !(cMode && ((lightState) == 0))){ // timing is typically .5 seconds slow due to human reaction time
  68:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <stateMultiplier>
  6c:	20 91 71 00 	lds	r18, 0x0071	; 0x800071 <currentTime>
  70:	30 91 72 00 	lds	r19, 0x0072	; 0x800072 <currentTime+0x1>
  74:	4a ef       	ldi	r20, 0xFA	; 250
  76:	84 9f       	mul	r24, r20
  78:	c0 01       	movw	r24, r0
  7a:	11 24       	eor	r1, r1
  7c:	28 17       	cp	r18, r24
  7e:	39 07       	cpc	r19, r25
  80:	08 f4       	brcc	.+2      	; 0x84 <light_control+0x26>
  82:	4e c0       	rjmp	.+156    	; 0x120 <light_control+0xc2>
  84:	80 91 6d 00 	lds	r24, 0x006D	; 0x80006d <cMode>
  88:	88 23       	and	r24, r24
  8a:	39 f0       	breq	.+14     	; 0x9a <light_control+0x3c>
  8c:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <lightState>
  90:	90 91 6f 00 	lds	r25, 0x006F	; 0x80006f <lightState+0x1>
  94:	89 2b       	or	r24, r25
  96:	09 f4       	brne	.+2      	; 0x9a <light_control+0x3c>
  98:	43 c0       	rjmp	.+134    	; 0x120 <light_control+0xc2>
		// Turn off the current light
		PORTC |= (1<<(lightState));
  9a:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <lightState>
  9e:	90 91 6f 00 	lds	r25, 0x006F	; 0x80006f <lightState+0x1>
  a2:	25 b3       	in	r18, 0x15	; 21
  a4:	41 e0       	ldi	r20, 0x01	; 1
  a6:	50 e0       	ldi	r21, 0x00	; 0
  a8:	ba 01       	movw	r22, r20
  aa:	02 c0       	rjmp	.+4      	; 0xb0 <light_control+0x52>
  ac:	66 0f       	add	r22, r22
  ae:	77 1f       	adc	r23, r23
  b0:	8a 95       	dec	r24
  b2:	e2 f7       	brpl	.-8      	; 0xac <light_control+0x4e>
  b4:	cb 01       	movw	r24, r22
  b6:	82 2b       	or	r24, r18
  b8:	85 bb       	out	0x15, r24	; 21
		// Increase light state
		lightState++;
  ba:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <lightState>
  be:	90 91 6f 00 	lds	r25, 0x006F	; 0x80006f <lightState+0x1>
  c2:	01 96       	adiw	r24, 0x01	; 1
  c4:	90 93 6f 00 	sts	0x006F, r25	; 0x80006f <lightState+0x1>
  c8:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <lightState>
		volatile uint8_t efficient_lightState = (lightState%3); //We add this to ensure we don't perform the modulus more than we need as it is inefficient can be removed for lightState %= 3 I think.
  cc:	e0 91 6e 00 	lds	r30, 0x006E	; 0x80006e <lightState>
  d0:	f0 91 6f 00 	lds	r31, 0x006F	; 0x80006f <lightState+0x1>
  d4:	9f 01       	movw	r18, r30
  d6:	ab ea       	ldi	r26, 0xAB	; 171
  d8:	ba ea       	ldi	r27, 0xAA	; 170
  da:	41 d2       	rcall	.+1154   	; 0x55e <__umulhisi3>
  dc:	96 95       	lsr	r25
  de:	87 95       	ror	r24
  e0:	9c 01       	movw	r18, r24
  e2:	22 0f       	add	r18, r18
  e4:	33 1f       	adc	r19, r19
  e6:	82 0f       	add	r24, r18
  e8:	93 1f       	adc	r25, r19
  ea:	e8 1b       	sub	r30, r24
  ec:	f9 0b       	sbc	r31, r25
  ee:	e9 83       	std	Y+1, r30	; 0x01
		lightState = efficient_lightState;
  f0:	89 81       	ldd	r24, Y+1	; 0x01
  f2:	90 e0       	ldi	r25, 0x00	; 0
  f4:	90 93 6f 00 	sts	0x006F, r25	; 0x80006f <lightState+0x1>
  f8:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <lightState>
		// Turn on current (new) light.
		PORTC &= ~(1<<(lightState));
  fc:	20 91 6e 00 	lds	r18, 0x006E	; 0x80006e <lightState>
 100:	30 91 6f 00 	lds	r19, 0x006F	; 0x80006f <lightState+0x1>
 104:	85 b3       	in	r24, 0x15	; 21
 106:	02 c0       	rjmp	.+4      	; 0x10c <light_control+0xae>
 108:	44 0f       	add	r20, r20
 10a:	55 1f       	adc	r21, r21
 10c:	2a 95       	dec	r18
 10e:	e2 f7       	brpl	.-8      	; 0x108 <light_control+0xaa>
 110:	40 95       	com	r20
 112:	50 95       	com	r21
 114:	48 23       	and	r20, r24
 116:	45 bb       	out	0x15, r20	; 21
		// reset current time so that we count another period
		currentTime = 0;
 118:	10 92 72 00 	sts	0x0072, r1	; 0x800072 <currentTime+0x1>
 11c:	10 92 71 00 	sts	0x0071, r1	; 0x800071 <currentTime>
	}
}
 120:	0f 90       	pop	r0
 122:	df 91       	pop	r29
 124:	cf 91       	pop	r28
 126:	08 95       	ret

00000128 <__vector_3>:


// Timer comparison ISR counts every 2 ms on our 3 variables
ISR(TIMER2_COMP_vect)
{
 128:	1f 92       	push	r1
 12a:	0f 92       	push	r0
 12c:	0f b6       	in	r0, 0x3f	; 63
 12e:	0f 92       	push	r0
 130:	11 24       	eor	r1, r1
 132:	2f 93       	push	r18
 134:	3f 93       	push	r19
 136:	4f 93       	push	r20
 138:	5f 93       	push	r21
 13a:	6f 93       	push	r22
 13c:	7f 93       	push	r23
 13e:	8f 93       	push	r24
 140:	9f 93       	push	r25
 142:	af 93       	push	r26
 144:	bf 93       	push	r27
 146:	ef 93       	push	r30
 148:	ff 93       	push	r31
	// Every 2 ms we increase our 3 timers.
	carSpeedTime++;
 14a:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <carSpeedTime>
 14e:	90 91 6c 00 	lds	r25, 0x006C	; 0x80006c <carSpeedTime+0x1>
 152:	01 96       	adiw	r24, 0x01	; 1
 154:	90 93 6c 00 	sts	0x006C, r25	; 0x80006c <carSpeedTime+0x1>
 158:	80 93 6b 00 	sts	0x006B, r24	; 0x80006b <carSpeedTime>
	blinkTimer++;
 15c:	80 91 70 00 	lds	r24, 0x0070	; 0x800070 <blinkTimer>
 160:	8f 5f       	subi	r24, 0xFF	; 255
 162:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <blinkTimer>
	currentTime++;
 166:	80 91 71 00 	lds	r24, 0x0071	; 0x800071 <currentTime>
 16a:	90 91 72 00 	lds	r25, 0x0072	; 0x800072 <currentTime+0x1>
 16e:	01 96       	adiw	r24, 0x01	; 1
 170:	90 93 72 00 	sts	0x0072, r25	; 0x800072 <currentTime+0x1>
 174:	80 93 71 00 	sts	0x0071, r24	; 0x800071 <currentTime>
	

	// Move these out? Slightly less accurate but we're gaining time for our other functions
	light_control();
 178:	72 df       	rcall	.-284    	; 0x5e <light_control>
}
 17a:	ff 91       	pop	r31
 17c:	ef 91       	pop	r30
 17e:	bf 91       	pop	r27
 180:	af 91       	pop	r26
 182:	9f 91       	pop	r25
 184:	8f 91       	pop	r24
 186:	7f 91       	pop	r23
 188:	6f 91       	pop	r22
 18a:	5f 91       	pop	r21
 18c:	4f 91       	pop	r20
 18e:	3f 91       	pop	r19
 190:	2f 91       	pop	r18
 192:	0f 90       	pop	r0
 194:	0f be       	out	0x3f, r0	; 63
 196:	0f 90       	pop	r0
 198:	1f 90       	pop	r1
 19a:	18 95       	reti

0000019c <__vector_8>:

//timer interrupt for timer 1
ISR(TIMER1_OVF_vect){
 19c:	1f 92       	push	r1
 19e:	0f 92       	push	r0
 1a0:	0f b6       	in	r0, 0x3f	; 63
 1a2:	0f 92       	push	r0
 1a4:	11 24       	eor	r1, r1
}
 1a6:	0f 90       	pop	r0
 1a8:	0f be       	out	0x3f, r0	; 63
 1aa:	0f 90       	pop	r0
 1ac:	1f 90       	pop	r1
 1ae:	18 95       	reti

000001b0 <LEDBlink>:


//determines how the LEDs that represent configuration mode and red light camera blink, based on user inputs
void LEDBlink (void){
	// If our red light camera flag is set, and blink timer is correct then we start our blinks for task 4
	if (RLC && (redLightBlinks <= 3) && (blinkTimer >= 250)){
 1b0:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <RLC>
 1b4:	88 23       	and	r24, r24
 1b6:	c1 f0       	breq	.+48     	; 0x1e8 <LEDBlink+0x38>
 1b8:	80 91 67 00 	lds	r24, 0x0067	; 0x800067 <redLightBlinks>
 1bc:	84 30       	cpi	r24, 0x04	; 4
 1be:	a0 f4       	brcc	.+40     	; 0x1e8 <LEDBlink+0x38>
 1c0:	80 91 70 00 	lds	r24, 0x0070	; 0x800070 <blinkTimer>
 1c4:	8a 3f       	cpi	r24, 0xFA	; 250
 1c6:	80 f0       	brcs	.+32     	; 0x1e8 <LEDBlink+0x38>
		// toggle the bit every 500ms and increase blink timer
		PORTB ^= (1<<PB4);
 1c8:	98 b3       	in	r25, 0x18	; 24
 1ca:	80 e1       	ldi	r24, 0x10	; 16
 1cc:	89 27       	eor	r24, r25
 1ce:	88 bb       	out	0x18, r24	; 24
		PORTC ^= (1<<PC5);
 1d0:	95 b3       	in	r25, 0x15	; 21
 1d2:	80 e2       	ldi	r24, 0x20	; 32
 1d4:	89 27       	eor	r24, r25
 1d6:	85 bb       	out	0x15, r24	; 21
		redLightBlinks++;
 1d8:	80 91 67 00 	lds	r24, 0x0067	; 0x800067 <redLightBlinks>
 1dc:	8f 5f       	subi	r24, 0xFF	; 255
 1de:	80 93 67 00 	sts	0x0067, r24	; 0x800067 <redLightBlinks>
		blinkTimer = 0;
 1e2:	10 92 70 00 	sts	0x0070, r1	; 0x800070 <blinkTimer>
 1e6:	08 c0       	rjmp	.+16     	; 0x1f8 <LEDBlink+0x48>
		} else if (redLightBlinks >= 4) {
 1e8:	80 91 67 00 	lds	r24, 0x0067	; 0x800067 <redLightBlinks>
 1ec:	84 30       	cpi	r24, 0x04	; 4
 1ee:	20 f0       	brcs	.+8      	; 0x1f8 <LEDBlink+0x48>
		// once the red light blinks has hit 4 indicating 2 blinks then we finish our sequence and reset our bits.
		redLightBlinks = 0;
 1f0:	10 92 67 00 	sts	0x0067, r1	; 0x800067 <redLightBlinks>
		RLC = 0;
 1f4:	10 92 68 00 	sts	0x0068, r1	; 0x800068 <RLC>
	}
	
	//starts blinking LED4 once condition for configuration mode is met
	if ((cMode == 1) && (currentTime >= 250) && ((lightState) == 0)){
 1f8:	80 91 6d 00 	lds	r24, 0x006D	; 0x80006d <cMode>
 1fc:	81 30       	cpi	r24, 0x01	; 1
 1fe:	99 f5       	brne	.+102    	; 0x266 <LEDBlink+0xb6>
 200:	80 91 71 00 	lds	r24, 0x0071	; 0x800071 <currentTime>
 204:	90 91 72 00 	lds	r25, 0x0072	; 0x800072 <currentTime+0x1>
 208:	8a 3f       	cpi	r24, 0xFA	; 250
 20a:	91 05       	cpc	r25, r1
 20c:	60 f1       	brcs	.+88     	; 0x266 <LEDBlink+0xb6>
 20e:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <lightState>
 212:	90 91 6f 00 	lds	r25, 0x006F	; 0x80006f <lightState+0x1>
 216:	89 2b       	or	r24, r25
 218:	31 f5       	brne	.+76     	; 0x266 <LEDBlink+0xb6>
		//pauses blinking for 3 seconds after a specific number of blinks based on
		//potentiometer that sets traffic light switching period
		if (blinks == stateMultiplier){
 21a:	90 91 60 00 	lds	r25, 0x0060	; 0x800060 <__data_start>
 21e:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <stateMultiplier>
 222:	98 13       	cpse	r25, r24
 224:	13 c0       	rjmp	.+38     	; 0x24c <LEDBlink+0x9c>
			if (currentTime>= (stateMultiplier*250)){ // stateMultiplier is now multiplied by 2 for optimization
 226:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <stateMultiplier>
 22a:	20 91 71 00 	lds	r18, 0x0071	; 0x800071 <currentTime>
 22e:	30 91 72 00 	lds	r19, 0x0072	; 0x800072 <currentTime+0x1>
 232:	4a ef       	ldi	r20, 0xFA	; 250
 234:	84 9f       	mul	r24, r20
 236:	c0 01       	movw	r24, r0
 238:	11 24       	eor	r1, r1
 23a:	28 17       	cp	r18, r24
 23c:	39 07       	cpc	r19, r25
 23e:	98 f0       	brcs	.+38     	; 0x266 <LEDBlink+0xb6>
				currentTime = 0;
 240:	10 92 72 00 	sts	0x0072, r1	; 0x800072 <currentTime+0x1>
 244:	10 92 71 00 	sts	0x0071, r1	; 0x800071 <currentTime>
				blinks = 0;
 248:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__data_start>
				}else{
				return;
			}
		}
		// Switching LED state every 500ms
		PORTC ^= (1<<PC3);
 24c:	95 b3       	in	r25, 0x15	; 21
 24e:	88 e0       	ldi	r24, 0x08	; 8
 250:	89 27       	eor	r24, r25
 252:	85 bb       	out	0x15, r24	; 21
		blinks++;
 254:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__data_start>
 258:	8f 5f       	subi	r24, 0xFF	; 255
 25a:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__data_start>
		
		// reset timer count after the required number of steps have been completed
		currentTime = 0;
 25e:	10 92 72 00 	sts	0x0072, r1	; 0x800072 <currentTime+0x1>
 262:	10 92 71 00 	sts	0x0071, r1	; 0x800071 <currentTime>
 266:	08 95       	ret

00000268 <configuration_mode>:
	}
}

/*configuration mode sets the period of switching for the traffic light. System goes into
config mode at next red light and stays at red light until config mode is turned off using SW0 */
void configuration_mode (void){
 268:	cf 93       	push	r28
 26a:	df 93       	push	r29
 26c:	00 d0       	rcall	.+0      	; 0x26e <configuration_mode+0x6>
 26e:	00 d0       	rcall	.+0      	; 0x270 <configuration_mode+0x8>
 270:	cd b7       	in	r28, 0x3d	; 61
 272:	de b7       	in	r29, 0x3e	; 62
	// take in button input to find whether or not SW0 is depressed (connected to PD1).
	// if cMode is there, and we compress the switch again, the conditions will be met for us to turn cMode off. The prevS portion is checking for button state change
	// the lightState portion was added such that we can only turn off the configuration mode when we are actually in configuration mode (red light)
	if ((cMode == 1) && (prevS &(1<<PD1)) && ((PIND &(1<<PD1)) == 0) && (lightState == 0)){
 274:	80 91 6d 00 	lds	r24, 0x006D	; 0x80006d <cMode>
 278:	81 30       	cpi	r24, 0x01	; 1
 27a:	b1 f4       	brne	.+44     	; 0x2a8 <configuration_mode+0x40>
 27c:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <prevS>
 280:	81 ff       	sbrs	r24, 1
 282:	12 c0       	rjmp	.+36     	; 0x2a8 <configuration_mode+0x40>
 284:	81 99       	sbic	0x10, 1	; 16
 286:	10 c0       	rjmp	.+32     	; 0x2a8 <configuration_mode+0x40>
 288:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <lightState>
 28c:	90 91 6f 00 	lds	r25, 0x006F	; 0x80006f <lightState+0x1>
 290:	89 2b       	or	r24, r25
 292:	51 f4       	brne	.+20     	; 0x2a8 <configuration_mode+0x40>
		cMode = 0;
 294:	10 92 6d 00 	sts	0x006D, r1	; 0x80006d <cMode>
		// Reset current time (might not be needed)this will ensure correct time for light flash
		currentTime = 0;
 298:	10 92 72 00 	sts	0x0072, r1	; 0x800072 <currentTime+0x1>
 29c:	10 92 71 00 	sts	0x0071, r1	; 0x800071 <currentTime>
		blinks = 0;
 2a0:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__data_start>
		// ensure that the light is not on when configuration is turned off
		PORTC |= (1<<PC3);
 2a4:	ab 9a       	sbi	0x15, 3	; 21
 2a6:	0d c0       	rjmp	.+26     	; 0x2c2 <configuration_mode+0x5a>
		}else if ((cMode == 0) && (prevS &(1<<PD1)) && ((PIND &(1<<PD1)) == 0)){// If it has been depressed, we toggle the configuration mode bit to show the state.
 2a8:	80 91 6d 00 	lds	r24, 0x006D	; 0x80006d <cMode>
 2ac:	81 11       	cpse	r24, r1
 2ae:	09 c0       	rjmp	.+18     	; 0x2c2 <configuration_mode+0x5a>
 2b0:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <prevS>
 2b4:	81 ff       	sbrs	r24, 1
 2b6:	05 c0       	rjmp	.+10     	; 0x2c2 <configuration_mode+0x5a>
 2b8:	81 99       	sbic	0x10, 1	; 16
 2ba:	03 c0       	rjmp	.+6      	; 0x2c2 <configuration_mode+0x5a>
		cMode = 1;
 2bc:	81 e0       	ldi	r24, 0x01	; 1
 2be:	80 93 6d 00 	sts	0x006D, r24	; 0x80006d <cMode>
	}
	
	// store the current state of the button into prevS
	prevS = PIND;
 2c2:	80 b3       	in	r24, 0x10	; 16
 2c4:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <prevS>
	
	// If we are in fact in red light state, and c mode
	if (cMode && ((lightState) == 0)) {
 2c8:	80 91 6d 00 	lds	r24, 0x006D	; 0x80006d <cMode>
 2cc:	88 23       	and	r24, r24
 2ce:	69 f1       	breq	.+90     	; 0x32a <configuration_mode+0xc2>
 2d0:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <lightState>
 2d4:	90 91 6f 00 	lds	r25, 0x006F	; 0x80006f <lightState+0x1>
 2d8:	89 2b       	or	r24, r25
 2da:	39 f5       	brne	.+78     	; 0x32a <configuration_mode+0xc2>
		// Reset light state to 0
		lightState = 0;
 2dc:	10 92 6f 00 	sts	0x006F, r1	; 0x80006f <lightState+0x1>
 2e0:	10 92 6e 00 	sts	0x006E, r1	; 0x80006e <lightState>
		
		// flag single conversion bit
		ADCSRA |= (1<<ADSC);
 2e4:	36 9a       	sbi	0x06, 6	; 6
		// Wait for the thing to finish converting
		while(ADCSRA & (1<<ADSC)){
 2e6:	36 99       	sbic	0x06, 6	; 6
 2e8:	fe cf       	rjmp	.-4      	; 0x2e6 <configuration_mode+0x7e>
		}
		
		// Write ADC to adcValue, ADC should be 10 bits
		volatile uint16_t adcValue = ADC;
 2ea:	84 b1       	in	r24, 0x04	; 4
 2ec:	95 b1       	in	r25, 0x05	; 5
 2ee:	9c 83       	std	Y+4, r25	; 0x04
 2f0:	8b 83       	std	Y+3, r24	; 0x03
		// Perform calculation once here so we dont do it twice later
		volatile uint16_t current_state_multiplier = ((adcValue/256)+1)*2; // Can we use uint8 here? further investigation is required
 2f2:	8b 81       	ldd	r24, Y+3	; 0x03
 2f4:	9c 81       	ldd	r25, Y+4	; 0x04
 2f6:	89 2f       	mov	r24, r25
 2f8:	99 27       	eor	r25, r25
 2fa:	01 96       	adiw	r24, 0x01	; 1
 2fc:	88 0f       	add	r24, r24
 2fe:	99 1f       	adc	r25, r25
 300:	9a 83       	std	Y+2, r25	; 0x02
 302:	89 83       	std	Y+1, r24	; 0x01
		
		//checks to see if potentiometer value has been changed
		if ((stateMultiplier) != current_state_multiplier){
 304:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <stateMultiplier>
 308:	29 81       	ldd	r18, Y+1	; 0x01
 30a:	3a 81       	ldd	r19, Y+2	; 0x02
 30c:	90 e0       	ldi	r25, 0x00	; 0
 30e:	82 17       	cp	r24, r18
 310:	93 07       	cpc	r25, r19
 312:	39 f0       	breq	.+14     	; 0x322 <configuration_mode+0xba>
			//restarts sequence when potentiometer value changes
			blinks = 0;
 314:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__data_start>
			currentTime = 0;
 318:	10 92 72 00 	sts	0x0072, r1	; 0x800072 <currentTime+0x1>
 31c:	10 92 71 00 	sts	0x0071, r1	; 0x800071 <currentTime>
			// set PC3 to low to restart blink sequence (ensure we start on low)
			PORTC |= (1<<PC3);
 320:	ab 9a       	sbi	0x15, 3	; 21
		}
		// dividing by 4 and adding one will give the correct value, we multiply by 2 here for optimization purposes
		stateMultiplier = current_state_multiplier;
 322:	89 81       	ldd	r24, Y+1	; 0x01
 324:	9a 81       	ldd	r25, Y+2	; 0x02
 326:	80 93 63 00 	sts	0x0063, r24	; 0x800063 <stateMultiplier>

	}
}
 32a:	0f 90       	pop	r0
 32c:	0f 90       	pop	r0
 32e:	0f 90       	pop	r0
 330:	0f 90       	pop	r0
 332:	df 91       	pop	r29
 334:	cf 91       	pop	r28
 336:	08 95       	ret

00000338 <red_light_camera>:
void red_light_camera() {
	

		
	//Turn red light camera flag on if LB3 switch changes from high to low and the current light is red
	if (((PIND & (1<<PD0)) == 0) && (prevS2 &(1<<PD0)) && ((lightState) == 0)){
 338:	80 99       	sbic	0x10, 0	; 16
 33a:	24 c0       	rjmp	.+72     	; 0x384 <red_light_camera+0x4c>
 33c:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <prevS2>
 340:	80 ff       	sbrs	r24, 0
 342:	20 c0       	rjmp	.+64     	; 0x384 <red_light_camera+0x4c>
 344:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <lightState>
 348:	90 91 6f 00 	lds	r25, 0x006F	; 0x80006f <lightState+0x1>
 34c:	89 2b       	or	r24, r25
 34e:	d1 f4       	brne	.+52     	; 0x384 <red_light_camera+0x4c>
		
		// If the red light camera is going, then we do not flash again
		if(!RLC){
 350:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <RLC>
 354:	81 11       	cpse	r24, r1
 356:	06 c0       	rjmp	.+12     	; 0x364 <red_light_camera+0x2c>
		// Debugging and testing timer response
		//PORTB ^= (1<<PB0);
		// Raise the flag that we have a red light infringement
		RLC = 1;
 358:	81 e0       	ldi	r24, 0x01	; 1
 35a:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <RLC>
		// set the time to immediately start our timer.
		blinkTimer = 250; 
 35e:	8a ef       	ldi	r24, 0xFA	; 250
 360:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <blinkTimer>
		}
		
		//increase the duty cycle by 1% for every button press (representing one car)
		numberOfSpeedingCars++;
 364:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <__data_end>
 368:	8f 5f       	subi	r24, 0xFF	; 255
 36a:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <__data_end>
		OCR1B = (numberOfSpeedingCars*255)/100; // 1% of 255 rounded up TEST We need to change this.
 36e:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <__data_end>
 372:	2f ef       	ldi	r18, 0xFF	; 255
 374:	82 9f       	mul	r24, r18
 376:	c0 01       	movw	r24, r0
 378:	11 24       	eor	r1, r1
 37a:	64 e6       	ldi	r22, 0x64	; 100
 37c:	70 e0       	ldi	r23, 0x00	; 0
 37e:	c0 d0       	rcall	.+384    	; 0x500 <__divmodhi4>
 380:	79 bd       	out	0x29, r23	; 41
 382:	68 bd       	out	0x28, r22	; 40
		
	}
	prevS2 = PIND;
 384:	80 b3       	in	r24, 0x10	; 16
 386:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <prevS2>
 38a:	08 95       	ret

0000038c <__vector_2>:
	
}

//PD3 interrupt
//this interrupt starts/resets our car speed timer when LB1 is passed (switch SW5 is pressed)
ISR(INT1_vect){
 38c:	1f 92       	push	r1
 38e:	0f 92       	push	r0
 390:	0f b6       	in	r0, 0x3f	; 63
 392:	0f 92       	push	r0
 394:	11 24       	eor	r1, r1
 396:	8f 93       	push	r24
 398:	9f 93       	push	r25
	//Start the timer count
	carSpeedTime = 0;
 39a:	10 92 6c 00 	sts	0x006C, r1	; 0x80006c <carSpeedTime+0x1>
 39e:	10 92 6b 00 	sts	0x006B, r1	; 0x80006b <carSpeedTime>
	PORTB ^= (1<<PB0);
 3a2:	98 b3       	in	r25, 0x18	; 24
 3a4:	81 e0       	ldi	r24, 0x01	; 1
 3a6:	89 27       	eor	r24, r25
 3a8:	88 bb       	out	0x18, r24	; 24
	// Debugging and testing timer response
	//PORTB ^= (1<<PB0);
}
 3aa:	9f 91       	pop	r25
 3ac:	8f 91       	pop	r24
 3ae:	0f 90       	pop	r0
 3b0:	0f be       	out	0x3f, r0	; 63
 3b2:	0f 90       	pop	r0
 3b4:	1f 90       	pop	r1
 3b6:	18 95       	reti

000003b8 <__vector_1>:

// PD2 ISR
/*this interrupt is activated when LB2 is passed (switch SW6 is pressed), and calcuates the duty cycle of our PWM,
by taking the current car speed time during activation to calculate the speed of the car*/
ISR(INT0_vect){
 3b8:	1f 92       	push	r1
 3ba:	0f 92       	push	r0
 3bc:	0f b6       	in	r0, 0x3f	; 63
 3be:	0f 92       	push	r0
 3c0:	11 24       	eor	r1, r1
 3c2:	2f 93       	push	r18
 3c4:	3f 93       	push	r19
 3c6:	4f 93       	push	r20
 3c8:	5f 93       	push	r21
 3ca:	6f 93       	push	r22
 3cc:	7f 93       	push	r23
 3ce:	8f 93       	push	r24
 3d0:	9f 93       	push	r25
 3d2:	af 93       	push	r26
 3d4:	bf 93       	push	r27
 3d6:	ef 93       	push	r30
 3d8:	ff 93       	push	r31

	recordedTime = carSpeedTime;
 3da:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <carSpeedTime>
 3de:	90 91 6c 00 	lds	r25, 0x006C	; 0x80006c <carSpeedTime+0x1>
 3e2:	90 93 66 00 	sts	0x0066, r25	; 0x800066 <recordedTime+0x1>
 3e6:	80 93 65 00 	sts	0x0065, r24	; 0x800065 <recordedTime>
	// Debugging and testing timer response
	//PORTB ^= (1<<PB0);
	//20m * 3.6 (conversion to Km/h) * 500 (conversion of ms to seconds)
	//carSpeed = 36000/recordedTime;
	carSpeed = 36000/recordedTime;
 3ea:	20 91 65 00 	lds	r18, 0x0065	; 0x800065 <recordedTime>
 3ee:	30 91 66 00 	lds	r19, 0x0066	; 0x800066 <recordedTime+0x1>
 3f2:	40 e0       	ldi	r20, 0x00	; 0
 3f4:	50 e0       	ldi	r21, 0x00	; 0
 3f6:	60 ea       	ldi	r22, 0xA0	; 160
 3f8:	7c e8       	ldi	r23, 0x8C	; 140
 3fa:	80 e0       	ldi	r24, 0x00	; 0
 3fc:	90 e0       	ldi	r25, 0x00	; 0
 3fe:	93 d0       	rcall	.+294    	; 0x526 <__divmodsi4>
 400:	30 93 6a 00 	sts	0x006A, r19	; 0x80006a <carSpeed+0x1>
 404:	20 93 69 00 	sts	0x0069, r18	; 0x800069 <carSpeed>

	//if recorded speed is greater than 100, speed is capped at 100 for our duty cycle
	if (carSpeed >= 100){
 408:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <carSpeed>
 40c:	90 91 6a 00 	lds	r25, 0x006A	; 0x80006a <carSpeed+0x1>
 410:	84 36       	cpi	r24, 0x64	; 100
 412:	91 05       	cpc	r25, r1
 414:	50 f0       	brcs	.+20     	; 0x42a <__LOCK_REGION_LENGTH__+0x2a>
		carSpeed = 100;
 416:	84 e6       	ldi	r24, 0x64	; 100
 418:	90 e0       	ldi	r25, 0x00	; 0
 41a:	90 93 6a 00 	sts	0x006A, r25	; 0x80006a <carSpeed+0x1>
 41e:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <carSpeed>
		PORTB ^= (1<<PB0);
 422:	98 b3       	in	r25, 0x18	; 24
 424:	81 e0       	ldi	r24, 0x01	; 1
 426:	89 27       	eor	r24, r25
 428:	88 bb       	out	0x18, r24	; 24
	}
	
	OCR1A = ((carSpeed*255)/100);// Scale OCR1A to be between 0 - 256 instead of 0 - 100
 42a:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <carSpeed>
 42e:	90 91 6a 00 	lds	r25, 0x006A	; 0x80006a <carSpeed+0x1>
 432:	4f ef       	ldi	r20, 0xFF	; 255
 434:	48 9f       	mul	r20, r24
 436:	90 01       	movw	r18, r0
 438:	49 9f       	mul	r20, r25
 43a:	30 0d       	add	r19, r0
 43c:	11 24       	eor	r1, r1
 43e:	36 95       	lsr	r19
 440:	27 95       	ror	r18
 442:	36 95       	lsr	r19
 444:	27 95       	ror	r18
 446:	ab e7       	ldi	r26, 0x7B	; 123
 448:	b4 e1       	ldi	r27, 0x14	; 20
 44a:	89 d0       	rcall	.+274    	; 0x55e <__umulhisi3>
 44c:	96 95       	lsr	r25
 44e:	87 95       	ror	r24
 450:	9b bd       	out	0x2b, r25	; 43
 452:	8a bd       	out	0x2a, r24	; 42
}
 454:	ff 91       	pop	r31
 456:	ef 91       	pop	r30
 458:	bf 91       	pop	r27
 45a:	af 91       	pop	r26
 45c:	9f 91       	pop	r25
 45e:	8f 91       	pop	r24
 460:	7f 91       	pop	r23
 462:	6f 91       	pop	r22
 464:	5f 91       	pop	r21
 466:	4f 91       	pop	r20
 468:	3f 91       	pop	r19
 46a:	2f 91       	pop	r18
 46c:	0f 90       	pop	r0
 46e:	0f be       	out	0x3f, r0	; 63
 470:	0f 90       	pop	r0
 472:	1f 90       	pop	r1
 474:	18 95       	reti

00000476 <main>:

int main(void)
{
	//set outputs
	DDRB |= (1<<DDB0 | 1<<DDB1 | 1<<DDB2 | 1<<DDB3 | 1<<DDB4 | 1<<DDB5);
 476:	87 b3       	in	r24, 0x17	; 23
 478:	8f 63       	ori	r24, 0x3F	; 63
 47a:	87 bb       	out	0x17, r24	; 23
	PORTB |= (1<<DDB0);
 47c:	c0 9a       	sbi	0x18, 0	; 24
	DDRC |= (1<<DDC0 | 1<<DDC1 | 1<<DDC2 | 1<<DDC3 | 1<<DDC5);
 47e:	84 b3       	in	r24, 0x14	; 20
 480:	8f 62       	ori	r24, 0x2F	; 47
 482:	84 bb       	out	0x14, r24	; 20
	PORTC |= (1<<PC3 | 1<<PC5);
 484:	85 b3       	in	r24, 0x15	; 21
 486:	88 62       	ori	r24, 0x28	; 40
 488:	85 bb       	out	0x15, r24	; 21
	// Set PC4 for adc input
	DDRC &= ~(1<<DDC4);
 48a:	a4 98       	cbi	0x14, 4	; 20
	// Set port D to be inputs
	DDRD &= ~(1<<DDD0 | 1<<DDD1 | 1<<DDD2 | 1<<DDD3 | 1<<DDD4 | 1<<DDD5);
 48c:	81 b3       	in	r24, 0x11	; 17
 48e:	80 7c       	andi	r24, 0xC0	; 192
 490:	81 bb       	out	0x11, r24	; 17
	

	// Initialize button ISR for PD2 to falling edge
	GICR |= (1<<INT0);
 492:	8b b7       	in	r24, 0x3b	; 59
 494:	80 64       	ori	r24, 0x40	; 64
 496:	8b bf       	out	0x3b, r24	; 59
	MCUCR |= (1<<ISC01 | 1<<ISC00);
 498:	85 b7       	in	r24, 0x35	; 53
 49a:	83 60       	ori	r24, 0x03	; 3
 49c:	85 bf       	out	0x35, r24	; 53
	
	// Initialize button ISR for PD3 to rising edge
	GICR |= (1<<INT1);
 49e:	8b b7       	in	r24, 0x3b	; 59
 4a0:	80 68       	ori	r24, 0x80	; 128
 4a2:	8b bf       	out	0x3b, r24	; 59
	MCUCR |= (1<<ISC11);
 4a4:	85 b7       	in	r24, 0x35	; 53
 4a6:	88 60       	ori	r24, 0x08	; 8
 4a8:	85 bf       	out	0x35, r24	; 53
	MCUCR &= ~(1<<ISC10);
 4aa:	85 b7       	in	r24, 0x35	; 53
 4ac:	8b 7f       	andi	r24, 0xFB	; 251
 4ae:	85 bf       	out	0x35, r24	; 53
	
	// Timer setup for prescaling of 8
	// OCIE2 Timer 2 match enabled set
	// TOEI1 is timer overflow flag
	TIMSK |= (1<<OCIE2 | 1<<TOIE1);
 4b0:	89 b7       	in	r24, 0x39	; 57
 4b2:	84 68       	ori	r24, 0x84	; 132
 4b4:	89 bf       	out	0x39, r24	; 57
	// CS21 sets prescaler of 8
	// WGM21 sets CTC with a top value of OCR2
	TCCR2 |= (1<<CS21 | 1<<WGM21);
 4b6:	85 b5       	in	r24, 0x25	; 37
 4b8:	8a 60       	ori	r24, 0x0A	; 10
 4ba:	85 bd       	out	0x25, r24	; 37
	OCR1A = 0x00;
 4bc:	1b bc       	out	0x2b, r1	; 43
 4be:	1a bc       	out	0x2a, r1	; 42
	OCR1B = 0x00;
 4c0:	19 bc       	out	0x29, r1	; 41
 4c2:	18 bc       	out	0x28, r1	; 40
	OCR2 = 255;
 4c4:	8f ef       	ldi	r24, 0xFF	; 255
 4c6:	83 bd       	out	0x23, r24	; 35
	
	// Set up bits to fast PWM with a top value of 0x00FF
	// COM1A1 is set so we have OC1A clearing on match.
	TCCR1A |= (1<<WGM10 | 1<<COM1A1);
 4c8:	8f b5       	in	r24, 0x2f	; 47
 4ca:	81 68       	ori	r24, 0x81	; 129
 4cc:	8f bd       	out	0x2f, r24	; 47
	TCCR1B |= (1<<WGM12 | 1<<CS12);
 4ce:	8e b5       	in	r24, 0x2e	; 46
 4d0:	8c 60       	ori	r24, 0x0C	; 12
 4d2:	8e bd       	out	0x2e, r24	; 46
	TCCR1A |= (1<<COM1B1);
 4d4:	8f b5       	in	r24, 0x2f	; 47
 4d6:	80 62       	ori	r24, 0x20	; 32
 4d8:	8f bd       	out	0x2f, r24	; 47
	TCNT1 = 0xFFF - 3906;
 4da:	8d eb       	ldi	r24, 0xBD	; 189
 4dc:	90 e0       	ldi	r25, 0x00	; 0
 4de:	9d bd       	out	0x2d, r25	; 45
 4e0:	8c bd       	out	0x2c, r24	; 44
	
	// Initialise ADC for single sample;
	ADMUX = 0;
 4e2:	17 b8       	out	0x07, r1	; 7
	// Code to setup ADMUX
	ADMUX &= ~(1<<MUX3 | 1<<MUX1 | 1<<MUX0);
 4e4:	87 b1       	in	r24, 0x07	; 7
 4e6:	84 7f       	andi	r24, 0xF4	; 244
 4e8:	87 b9       	out	0x07, r24	; 7
	ADMUX |= (1<<MUX2);
 4ea:	3a 9a       	sbi	0x07, 2	; 7
	/*DDRB |= (1<<DDB0 | 1<<DDB1 | 1<<DDB2 | 1<<DDB3);*/
	
	// Code to set ADCSRA
	ADCSRA |= (1<<ADEN);
 4ec:	37 9a       	sbi	0x06, 7	; 6
	ADCSRA |= (1<<ADPS0 | 1<<ADPS1);
 4ee:	86 b1       	in	r24, 0x06	; 6
 4f0:	83 60       	ori	r24, 0x03	; 3
 4f2:	86 b9       	out	0x06, r24	; 6
	
	//Enable global interrupts
	sei();
 4f4:	78 94       	sei
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 4f6:	00 00       	nop
	
	while (1)
	{
		_delay_us(1);
		configuration_mode();
 4f8:	b7 de       	rcall	.-658    	; 0x268 <configuration_mode>
		red_light_camera();
 4fa:	1e df       	rcall	.-452    	; 0x338 <red_light_camera>
		LEDBlink();
 4fc:	59 de       	rcall	.-846    	; 0x1b0 <LEDBlink>
 4fe:	fb cf       	rjmp	.-10     	; 0x4f6 <main+0x80>

00000500 <__divmodhi4>:
 500:	97 fb       	bst	r25, 7
 502:	07 2e       	mov	r0, r23
 504:	16 f4       	brtc	.+4      	; 0x50a <__divmodhi4+0xa>
 506:	00 94       	com	r0
 508:	06 d0       	rcall	.+12     	; 0x516 <__divmodhi4_neg1>
 50a:	77 fd       	sbrc	r23, 7
 50c:	08 d0       	rcall	.+16     	; 0x51e <__divmodhi4_neg2>
 50e:	33 d0       	rcall	.+102    	; 0x576 <__udivmodhi4>
 510:	07 fc       	sbrc	r0, 7
 512:	05 d0       	rcall	.+10     	; 0x51e <__divmodhi4_neg2>
 514:	3e f4       	brtc	.+14     	; 0x524 <__divmodhi4_exit>

00000516 <__divmodhi4_neg1>:
 516:	90 95       	com	r25
 518:	81 95       	neg	r24
 51a:	9f 4f       	sbci	r25, 0xFF	; 255
 51c:	08 95       	ret

0000051e <__divmodhi4_neg2>:
 51e:	70 95       	com	r23
 520:	61 95       	neg	r22
 522:	7f 4f       	sbci	r23, 0xFF	; 255

00000524 <__divmodhi4_exit>:
 524:	08 95       	ret

00000526 <__divmodsi4>:
 526:	05 2e       	mov	r0, r21
 528:	97 fb       	bst	r25, 7
 52a:	16 f4       	brtc	.+4      	; 0x530 <__divmodsi4+0xa>
 52c:	00 94       	com	r0
 52e:	0f d0       	rcall	.+30     	; 0x54e <__negsi2>
 530:	57 fd       	sbrc	r21, 7
 532:	05 d0       	rcall	.+10     	; 0x53e <__divmodsi4_neg2>
 534:	34 d0       	rcall	.+104    	; 0x59e <__udivmodsi4>
 536:	07 fc       	sbrc	r0, 7
 538:	02 d0       	rcall	.+4      	; 0x53e <__divmodsi4_neg2>
 53a:	46 f4       	brtc	.+16     	; 0x54c <__divmodsi4_exit>
 53c:	08 c0       	rjmp	.+16     	; 0x54e <__negsi2>

0000053e <__divmodsi4_neg2>:
 53e:	50 95       	com	r21
 540:	40 95       	com	r20
 542:	30 95       	com	r19
 544:	21 95       	neg	r18
 546:	3f 4f       	sbci	r19, 0xFF	; 255
 548:	4f 4f       	sbci	r20, 0xFF	; 255
 54a:	5f 4f       	sbci	r21, 0xFF	; 255

0000054c <__divmodsi4_exit>:
 54c:	08 95       	ret

0000054e <__negsi2>:
 54e:	90 95       	com	r25
 550:	80 95       	com	r24
 552:	70 95       	com	r23
 554:	61 95       	neg	r22
 556:	7f 4f       	sbci	r23, 0xFF	; 255
 558:	8f 4f       	sbci	r24, 0xFF	; 255
 55a:	9f 4f       	sbci	r25, 0xFF	; 255
 55c:	08 95       	ret

0000055e <__umulhisi3>:
 55e:	a2 9f       	mul	r26, r18
 560:	b0 01       	movw	r22, r0
 562:	b3 9f       	mul	r27, r19
 564:	c0 01       	movw	r24, r0
 566:	a3 9f       	mul	r26, r19
 568:	01 d0       	rcall	.+2      	; 0x56c <__umulhisi3+0xe>
 56a:	b2 9f       	mul	r27, r18
 56c:	70 0d       	add	r23, r0
 56e:	81 1d       	adc	r24, r1
 570:	11 24       	eor	r1, r1
 572:	91 1d       	adc	r25, r1
 574:	08 95       	ret

00000576 <__udivmodhi4>:
 576:	aa 1b       	sub	r26, r26
 578:	bb 1b       	sub	r27, r27
 57a:	51 e1       	ldi	r21, 0x11	; 17
 57c:	07 c0       	rjmp	.+14     	; 0x58c <__udivmodhi4_ep>

0000057e <__udivmodhi4_loop>:
 57e:	aa 1f       	adc	r26, r26
 580:	bb 1f       	adc	r27, r27
 582:	a6 17       	cp	r26, r22
 584:	b7 07       	cpc	r27, r23
 586:	10 f0       	brcs	.+4      	; 0x58c <__udivmodhi4_ep>
 588:	a6 1b       	sub	r26, r22
 58a:	b7 0b       	sbc	r27, r23

0000058c <__udivmodhi4_ep>:
 58c:	88 1f       	adc	r24, r24
 58e:	99 1f       	adc	r25, r25
 590:	5a 95       	dec	r21
 592:	a9 f7       	brne	.-22     	; 0x57e <__udivmodhi4_loop>
 594:	80 95       	com	r24
 596:	90 95       	com	r25
 598:	bc 01       	movw	r22, r24
 59a:	cd 01       	movw	r24, r26
 59c:	08 95       	ret

0000059e <__udivmodsi4>:
 59e:	a1 e2       	ldi	r26, 0x21	; 33
 5a0:	1a 2e       	mov	r1, r26
 5a2:	aa 1b       	sub	r26, r26
 5a4:	bb 1b       	sub	r27, r27
 5a6:	fd 01       	movw	r30, r26
 5a8:	0d c0       	rjmp	.+26     	; 0x5c4 <__udivmodsi4_ep>

000005aa <__udivmodsi4_loop>:
 5aa:	aa 1f       	adc	r26, r26
 5ac:	bb 1f       	adc	r27, r27
 5ae:	ee 1f       	adc	r30, r30
 5b0:	ff 1f       	adc	r31, r31
 5b2:	a2 17       	cp	r26, r18
 5b4:	b3 07       	cpc	r27, r19
 5b6:	e4 07       	cpc	r30, r20
 5b8:	f5 07       	cpc	r31, r21
 5ba:	20 f0       	brcs	.+8      	; 0x5c4 <__udivmodsi4_ep>
 5bc:	a2 1b       	sub	r26, r18
 5be:	b3 0b       	sbc	r27, r19
 5c0:	e4 0b       	sbc	r30, r20
 5c2:	f5 0b       	sbc	r31, r21

000005c4 <__udivmodsi4_ep>:
 5c4:	66 1f       	adc	r22, r22
 5c6:	77 1f       	adc	r23, r23
 5c8:	88 1f       	adc	r24, r24
 5ca:	99 1f       	adc	r25, r25
 5cc:	1a 94       	dec	r1
 5ce:	69 f7       	brne	.-38     	; 0x5aa <__udivmodsi4_loop>
 5d0:	60 95       	com	r22
 5d2:	70 95       	com	r23
 5d4:	80 95       	com	r24
 5d6:	90 95       	com	r25
 5d8:	9b 01       	movw	r18, r22
 5da:	ac 01       	movw	r20, r24
 5dc:	bd 01       	movw	r22, r26
 5de:	cf 01       	movw	r24, r30
 5e0:	08 95       	ret

000005e2 <_exit>:
 5e2:	f8 94       	cli

000005e4 <__stop_program>:
 5e4:	ff cf       	rjmp	.-2      	; 0x5e4 <__stop_program>
